// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TI_API.Infraestucture.Persistence;

#nullable disable

namespace TI_API.Infraestucture.Migrations
{
    [DbContext(typeof(CommandContext))]
    partial class CommandContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TI_API.Domain.Entities.ApplicationRol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d3087c0-ffe7-4482-921f-588fbf057d8b"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("50ea312a-b027-4b57-9b9c-fd006e712213"),
                            Name = "JefeProceso",
                            NormalizedName = "JEFEPROCESO"
                        },
                        new
                        {
                            Id = new Guid("765e0479-8871-4e35-a215-3e41670c5ed5"),
                            Name = "JefeArea",
                            NormalizedName = "JEFEAREA"
                        },
                        new
                        {
                            Id = new Guid("1f0c337b-e8fe-43ed-b5e9-b49139d8f7bf"),
                            Name = "UsuarioNormal",
                            NormalizedName = "USUARIONORMAL"
                        });
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorDeAreaModel", b =>
                {
                    b.Property<int>("IndicadorId")
                        .HasColumnType("integer");

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("DecimalMetaCumplirArea")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DecimalMetaRealArea")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Evaluacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsMetaCumplirAreaPorcentage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaRealAreaPorcentage")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaCumplirArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MetaRealArea")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IndicadorId", "AreaId");

                    b.HasIndex("AreaId");

                    b.HasIndex("Evaluacion");

                    b.ToTable("IndicadoresDeArea");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorDeObjetivoModel", b =>
                {
                    b.Property<int>("IndicadorId")
                        .HasColumnType("integer");

                    b.Property<int>("ObjetivoId")
                        .HasColumnType("integer");

                    b.HasKey("IndicadorId", "ObjetivoId");

                    b.HasIndex("ObjetivoId");

                    b.ToTable("IndicadoresDeObjetivo");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("DecimalMetaCumplir")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<decimal>("DecimalMetaReal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Evaluacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMetaCumplirPorcentage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMetaRealPorcentage")
                        .HasColumnType("boolean");

                    b.Property<string>("MetaCumplir")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MetaReal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Origen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProcesoId")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Evaluacion");

                    b.HasIndex("Nombre");

                    b.HasIndex("ProcesoId");

                    b.HasIndex("Tipo");

                    b.ToTable("Indicadores");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.NotificacionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("integer");

                    b.Property<Guid>("DestinatarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pendiente");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IndicadorDeAreaId")
                        .HasColumnType("integer");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("MensajeRechazo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("MetaCumplirPropuesta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("RemitenteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("DestinatarioId");

                    b.HasIndex("Estado");

                    b.HasIndex("FechaCreacion");

                    b.HasIndex("RemitenteId");

                    b.HasIndex("IndicadorDeAreaId", "AreaId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.ObjetivoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Evaluacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NoEvaluado");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("Evaluacion");

                    b.HasIndex("Nombre");

                    b.ToTable("Objetivos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Formar profesionales integrales, competentes, con espíritu innovador y firmeza político ideológica"
                        },
                        new
                        {
                            Id = 2,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Lograr la preparación y el completamiento del claustro y de los cuadros"
                        },
                        new
                        {
                            Id = 3,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Fortalecer el vínculo de la Educación Superior con las empresas"
                        },
                        new
                        {
                            Id = 4,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Impactar al desarrollo científico y tecnológico"
                        },
                        new
                        {
                            Id = 5,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Perfeccionar la preparación y superación de los cuadros y reservas"
                        },
                        new
                        {
                            Id = 6,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Potenciar la relación universidad-sociedad"
                        },
                        new
                        {
                            Id = 7,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Garantizar la transformación digital de las Universidades"
                        },
                        new
                        {
                            Id = 8,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Gestionar los recursos humanos, materiales y financieros"
                        },
                        new
                        {
                            Id = 9,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Asegurar la calidad de la Educación Superior Cubana"
                        });
                });

            modelBuilder.Entity("TI_API.Domain.Entities.ProcesoModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Evaluacion")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("NoEvaluado");

                    b.Property<Guid?>("JefeDeProcesoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ObjetivoModelId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Evaluacion");

                    b.HasIndex("JefeDeProcesoId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.HasIndex("ObjetivoModelId");

                    b.ToTable("Procesos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Pregrado"
                        },
                        new
                        {
                            Id = 2,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Posgrado"
                        },
                        new
                        {
                            Id = 3,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Ciencia, Tecnología e Innovación"
                        },
                        new
                        {
                            Id = 4,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Extensión Universitaria"
                        },
                        new
                        {
                            Id = 5,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Recursos Humanos"
                        },
                        new
                        {
                            Id = 6,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Información, Comunicación e Informatización"
                        },
                        new
                        {
                            Id = 7,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Internacionalización"
                        },
                        new
                        {
                            Id = 8,
                            Evaluacion = "NoEvaluado",
                            Nombre = "Aseguramiento Material y Financiero"
                        });
                });

            modelBuilder.Entity("TI_API.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("AreaAsignadaId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<int?>("ProcesoAsignadoId")
                        .HasColumnType("integer");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AreaAsignadaId")
                        .IsUnique();

                    b.HasIndex("Nombre");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProcesoAsignadoId")
                        .IsUnique();

                    b.HasIndex("RefreshToken");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("TI_API.Entities.AreaModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("JefeDeAreaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JefeDeAreaId");

                    b.HasIndex("Tipo");

                    b.HasIndex("Nombre", "Tipo")
                        .IsUnique();

                    b.ToTable("Areas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "FACIM",
                            Tipo = "Facultad"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "FACUP",
                            Tipo = "Facultad"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Baguanos",
                            Tipo = "Municipio"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Gibara",
                            Tipo = "Municipio"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("TI_API.Domain.Entities.ApplicationRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("TI_API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("TI_API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("TI_API.Domain.Entities.ApplicationRol", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TI_API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("TI_API.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorDeAreaModel", b =>
                {
                    b.HasOne("TI_API.Entities.AreaModel", "Area")
                        .WithMany("IndicadoresAsignados")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TI_API.Domain.Entities.IndicadorModel", "Indicador")
                        .WithMany("IndicadoresAsignados")
                        .HasForeignKey("IndicadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Indicador");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorDeObjetivoModel", b =>
                {
                    b.HasOne("TI_API.Domain.Entities.IndicadorModel", "Indicador")
                        .WithMany("ObjetivosAsignados")
                        .HasForeignKey("IndicadorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TI_API.Domain.Entities.ObjetivoModel", "Objetivo")
                        .WithMany("IndicadoresAsignados")
                        .HasForeignKey("ObjetivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Indicador");

                    b.Navigation("Objetivo");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorModel", b =>
                {
                    b.HasOne("TI_API.Domain.Entities.ProcesoModel", "Proceso")
                        .WithMany("Indicadores")
                        .HasForeignKey("ProcesoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proceso");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.NotificacionModel", b =>
                {
                    b.HasOne("TI_API.Entities.AreaModel", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TI_API.Entities.ApplicationUser", "Destinatario")
                        .WithMany()
                        .HasForeignKey("DestinatarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TI_API.Entities.ApplicationUser", "Remitente")
                        .WithMany()
                        .HasForeignKey("RemitenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TI_API.Domain.Entities.IndicadorDeAreaModel", "IndicadorDeArea")
                        .WithMany()
                        .HasForeignKey("IndicadorDeAreaId", "AreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Area");

                    b.Navigation("Destinatario");

                    b.Navigation("IndicadorDeArea");

                    b.Navigation("Remitente");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.ProcesoModel", b =>
                {
                    b.HasOne("TI_API.Entities.ApplicationUser", "JefeDeProceso")
                        .WithMany()
                        .HasForeignKey("JefeDeProcesoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TI_API.Domain.Entities.ObjetivoModel", null)
                        .WithMany("Procesos")
                        .HasForeignKey("ObjetivoModelId");

                    b.Navigation("JefeDeProceso");
                });

            modelBuilder.Entity("TI_API.Entities.ApplicationUser", b =>
                {
                    b.HasOne("TI_API.Entities.AreaModel", "AreaAsignada")
                        .WithMany()
                        .HasForeignKey("AreaAsignadaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TI_API.Domain.Entities.ProcesoModel", "ProcesoAsignado")
                        .WithMany()
                        .HasForeignKey("ProcesoAsignadoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AreaAsignada");

                    b.Navigation("ProcesoAsignado");
                });

            modelBuilder.Entity("TI_API.Entities.AreaModel", b =>
                {
                    b.HasOne("TI_API.Entities.ApplicationUser", "JefeDeArea")
                        .WithMany()
                        .HasForeignKey("JefeDeAreaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("JefeDeArea");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.IndicadorModel", b =>
                {
                    b.Navigation("IndicadoresAsignados");

                    b.Navigation("ObjetivosAsignados");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.ObjetivoModel", b =>
                {
                    b.Navigation("IndicadoresAsignados");

                    b.Navigation("Procesos");
                });

            modelBuilder.Entity("TI_API.Domain.Entities.ProcesoModel", b =>
                {
                    b.Navigation("Indicadores");
                });

            modelBuilder.Entity("TI_API.Entities.AreaModel", b =>
                {
                    b.Navigation("IndicadoresAsignados");
                });
#pragma warning restore 612, 618
        }
    }
}
